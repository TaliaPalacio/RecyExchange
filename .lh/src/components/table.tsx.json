{
    "sourceFile": "src/components/table.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1728535723510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728536378721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,5 +310,5 @@\n     );\n   }\n };\n \n-export default table;\n+export default table, DataTableDemo, Payment, columns;\n"
                },
                {
                    "date": 1728536576041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,9 @@\n       },\n     },\n   ];\n \n-  export function DataTableDemo() {\n+  const DataTableDemo =() {\n     const [sorting, setSorting] = React.useState<SortingState>([]);\n     const [columnFilters, setColumnFilters] =\n       React.useState<ColumnFiltersState>([]);\n     const [columnVisibility, setColumnVisibility] =\n@@ -310,5 +310,5 @@\n     );\n   }\n };\n \n-export default table, DataTableDemo, Payment, columns;\n+export default table;\n"
                },
                {
                    "date": 1728536586836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,9 @@\n       },\n     },\n   ];\n \n-  const DataTableDemo =() {\n+  const DataTableDemo =() => {\n     const [sorting, setSorting] = React.useState<SortingState>([]);\n     const [columnFilters, setColumnFilters] =\n       React.useState<ColumnFiltersState>([]);\n     const [columnVisibility, setColumnVisibility] =\n"
                },
                {
                    "date": 1728536600807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n     status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n     email: string;\n   };\n \n-  export const columns: ColumnDef<Payment>[] = [\n+  const columns: ColumnDef<Payment>[] = [\n     {\n       id: \"select\",\n       header: ({ table }) => (\n         <Checkbox\n"
                },
                {
                    "date": 1728536934303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,15 @@\n     TableHead,\n     TableHeader,\n     TableRow,\n   } from \"@/components/ui/table\";\n+export type Payment = {\n+  id: string;\n+  amount: number;\n+  status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n+  email: string;\n+};\n+\n const table = () => {\n   const data: Payment[] = [\n     {\n       id: \"m5gr84i9\",\n@@ -66,15 +73,8 @@\n       email: \"carmella@hotmail.com\",\n     },\n   ];\n \n-  export type Payment = {\n-    id: string;\n-    amount: number;\n-    status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n-    email: string;\n-  };\n-\n   const columns: ColumnDef<Payment>[] = [\n     {\n       id: \"select\",\n       header: ({ table }) => (\n"
                },
                {
                    "date": 1728537631029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,314 +1,312 @@\n+\"use client\"\n \n-import * as React from \"react\";\n+import * as React from \"react\"\n import {\n-    ColumnDef,\n-    ColumnFiltersState,\n-    SortingState,\n-    VisibilityState,\n-    flexRender,\n-    getCoreRowModel,\n-    getFilteredRowModel,\n-    getPaginationRowModel,\n-    getSortedRowModel,\n-    useReactTable,\n-  } from \"@tanstack/react-table\";\n-  import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\";\n-  import { Button } from \"@/components/ui/button\";\n-  import { Checkbox } from \"@/components/ui/checkbox\";\n-  import {\n-    DropdownMenu,\n-    DropdownMenuCheckboxItem,\n-    DropdownMenuContent,\n-    DropdownMenuItem,\n-    DropdownMenuLabel,\n-    DropdownMenuSeparator,\n-    DropdownMenuTrigger,\n-  } from \"@/components/ui/dropdown-menu\";\n-  import { Input } from \"@/components/ui/input\";\n-  import {\n-    Table,\n-    TableBody,\n-    TableCell,\n-    TableHead,\n-    TableHeader,\n-    TableRow,\n-  } from \"@/components/ui/table\";\n+  ColumnDef,\n+  ColumnFiltersState,\n+  SortingState,\n+  VisibilityState,\n+  flexRender,\n+  getCoreRowModel,\n+  getFilteredRowModel,\n+  getPaginationRowModel,\n+  getSortedRowModel,\n+  useReactTable,\n+} from \"@tanstack/react-table\"\n+import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\"\n+\n+import { Button } from \"@/components/ui/button\"\n+import { Checkbox } from \"@/components/ui/checkbox\"\n+import {\n+  DropdownMenu,\n+  DropdownMenuCheckboxItem,\n+  DropdownMenuContent,\n+  DropdownMenuItem,\n+  DropdownMenuLabel,\n+  DropdownMenuSeparator,\n+  DropdownMenuTrigger,\n+} from \"@/components/ui/dropdown-menu\"\n+import { Input } from \"@/components/ui/input\"\n+import {\n+  Table,\n+  TableBody,\n+  TableCell,\n+  TableHead,\n+  TableHeader,\n+  TableRow,\n+} from \"@/components/ui/table\"\n+\n+const data: Payment[] = [\n+  {\n+    id: \"m5gr84i9\",\n+    amount: 316,\n+    status: \"success\",\n+    email: \"ken99@yahoo.com\",\n+  },\n+  {\n+    id: \"3u1reuv4\",\n+    amount: 242,\n+    status: \"success\",\n+    email: \"Abe45@gmail.com\",\n+  },\n+  {\n+    id: \"derv1ws0\",\n+    amount: 837,\n+    status: \"processing\",\n+    email: \"Monserrat44@gmail.com\",\n+  },\n+  {\n+    id: \"5kma53ae\",\n+    amount: 874,\n+    status: \"success\",\n+    email: \"Silas22@gmail.com\",\n+  },\n+  {\n+    id: \"bhqecj4p\",\n+    amount: 721,\n+    status: \"failed\",\n+    email: \"carmella@hotmail.com\",\n+  },\n+]\n+\n export type Payment = {\n-  id: string;\n-  amount: number;\n-  status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n-  email: string;\n-};\n+  id: string\n+  amount: number\n+  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n+  email: string\n+}\n \n-const table = () => {\n-  const data: Payment[] = [\n-    {\n-      id: \"m5gr84i9\",\n-      amount: 316,\n-      status: \"success\",\n-      email: \"ken99@yahoo.com\",\n+export const columns: ColumnDef<Payment>[] = [\n+  {\n+    id: \"select\",\n+    header: ({ table }) => (\n+      <Checkbox\n+        checked={\n+          table.getIsAllPageRowsSelected() ||\n+          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n+        }\n+        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n+        aria-label=\"Select all\"\n+      />\n+    ),\n+    cell: ({ row }) => (\n+      <Checkbox\n+        checked={row.getIsSelected()}\n+        onCheckedChange={(value) => row.toggleSelected(!!value)}\n+        aria-label=\"Select row\"\n+      />\n+    ),\n+    enableSorting: false,\n+    enableHiding: false,\n+  },\n+  {\n+    accessorKey: \"status\",\n+    header: \"Status\",\n+    cell: ({ row }) => (\n+      <div className=\"capitalize\">{row.getValue(\"status\")}</div>\n+    ),\n+  },\n+  {\n+    accessorKey: \"email\",\n+    header: ({ column }) => {\n+      return (\n+        <Button\n+          variant=\"ghost\"\n+          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n+        >\n+          Email\n+          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n+        </Button>\n+      )\n     },\n-    {\n-      id: \"3u1reuv4\",\n-      amount: 242,\n-      status: \"success\",\n-      email: \"Abe45@gmail.com\",\n-    },\n-    {\n-      id: \"derv1ws0\",\n-      amount: 837,\n-      status: \"processing\",\n-      email: \"Monserrat44@gmail.com\",\n-    },\n-    {\n-      id: \"5kma53ae\",\n-      amount: 874,\n-      status: \"success\",\n-      email: \"Silas22@gmail.com\",\n-    },\n-    {\n-      id: \"bhqecj4p\",\n-      amount: 721,\n-      status: \"failed\",\n-      email: \"carmella@hotmail.com\",\n-    },\n-  ];\n+    cell: ({ row }) => <div className=\"lowercase\">{row.getValue(\"email\")}</div>,\n+  },\n+  {\n+    accessorKey: \"amount\",\n+    header: () => <div className=\"text-right\">Amount</div>,\n+    cell: ({ row }) => {\n+      const amount = parseFloat(row.getValue(\"amount\"))\n \n-  const columns: ColumnDef<Payment>[] = [\n-    {\n-      id: \"select\",\n-      header: ({ table }) => (\n-        <Checkbox\n-          checked={\n-            table.getIsAllPageRowsSelected() ||\n-            (table.getIsSomePageRowsSelected() && \"indeterminate\")\n-          }\n-          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n-          aria-label=\"Select all\"\n-        />\n-      ),\n-      cell: ({ row }) => (\n-        <Checkbox\n-          checked={row.getIsSelected()}\n-          onCheckedChange={(value) => row.toggleSelected(!!value)}\n-          aria-label=\"Select row\"\n-        />\n-      ),\n-      enableSorting: false,\n-      enableHiding: false,\n-    },\n-    {\n-      accessorKey: \"status\",\n-      header: \"Status\",\n-      cell: ({ row }) => (\n-        <div className=\"capitalize\">{row.getValue(\"status\")}</div>\n-      ),\n-    },\n-    {\n-      accessorKey: \"email\",\n-      header: ({ column }) => {\n-        return (\n-          <Button\n-            variant=\"ghost\"\n-            onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n-          >\n-            Email\n-            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n-          </Button>\n-        );\n-      },\n-      cell: ({ row }) => (\n-        <div className=\"lowercase\">{row.getValue(\"email\")}</div>\n-      ),\n-    },\n-    {\n-      accessorKey: \"amount\",\n-      header: () => <div className=\"text-right\">Amount</div>,\n-      cell: ({ row }) => {\n-        const amount = parseFloat(row.getValue(\"amount\"));\n+      // Format the amount as a dollar amount\n+      const formatted = new Intl.NumberFormat(\"en-US\", {\n+        style: \"currency\",\n+        currency: \"USD\",\n+      }).format(amount)\n \n-        // Format the amount as a dollar amount\n-        const formatted = new Intl.NumberFormat(\"en-US\", {\n-          style: \"currency\",\n-          currency: \"USD\",\n-        }).format(amount);\n-\n-        return <div className=\"text-right font-medium\">{formatted}</div>;\n-      },\n+      return <div className=\"text-right font-medium\">{formatted}</div>\n     },\n-    {\n-      id: \"actions\",\n-      enableHiding: false,\n-      cell: ({ row }) => {\n-        const payment = row.original;\n+  },\n+  {\n+    id: \"actions\",\n+    enableHiding: false,\n+    cell: ({ row }) => {\n+      const payment = row.original\n \n-        return (\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-              <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n-                <span className=\"sr-only\">Open menu</span>\n-                <MoreHorizontal className=\"h-4 w-4\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-            <DropdownMenuContent align=\"end\">\n-              <DropdownMenuLabel>Actions</DropdownMenuLabel>\n-              <DropdownMenuItem\n-                onClick={() => navigator.clipboard.writeText(payment.id)}\n-              >\n-                Copy payment ID\n-              </DropdownMenuItem>\n-              <DropdownMenuSeparator />\n-              <DropdownMenuItem>View customer</DropdownMenuItem>\n-              <DropdownMenuItem>View payment details</DropdownMenuItem>\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        );\n-      },\n+      return (\n+        <DropdownMenu>\n+          <DropdownMenuTrigger asChild>\n+            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n+              <span className=\"sr-only\">Open menu</span>\n+              <MoreHorizontal className=\"h-4 w-4\" />\n+            </Button>\n+          </DropdownMenuTrigger>\n+          <DropdownMenuContent align=\"end\">\n+            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n+            <DropdownMenuItem\n+              onClick={() => navigator.clipboard.writeText(payment.id)}\n+            >\n+              Copy payment ID\n+            </DropdownMenuItem>\n+            <DropdownMenuSeparator />\n+            <DropdownMenuItem>View customer</DropdownMenuItem>\n+            <DropdownMenuItem>View payment details</DropdownMenuItem>\n+          </DropdownMenuContent>\n+        </DropdownMenu>\n+      )\n     },\n-  ];\n+  },\n+]\n \n-  const DataTableDemo =() => {\n-    const [sorting, setSorting] = React.useState<SortingState>([]);\n-    const [columnFilters, setColumnFilters] =\n-      React.useState<ColumnFiltersState>([]);\n-    const [columnVisibility, setColumnVisibility] =\n-      React.useState<VisibilityState>({});\n-    const [rowSelection, setRowSelection] = React.useState({});\n+export function DataTableDemo() {\n+  const [sorting, setSorting] = React.useState<SortingState>([])\n+  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n+    []\n+  )\n+  const [columnVisibility, setColumnVisibility] =\n+    React.useState<VisibilityState>({})\n+  const [rowSelection, setRowSelection] = React.useState({})\n \n-    const table = useReactTable({\n-      data,\n-      columns,\n-      onSortingChange: setSorting,\n-      onColumnFiltersChange: setColumnFilters,\n-      getCoreRowModel: getCoreRowModel(),\n-      getPaginationRowModel: getPaginationRowModel(),\n-      getSortedRowModel: getSortedRowModel(),\n-      getFilteredRowModel: getFilteredRowModel(),\n-      onColumnVisibilityChange: setColumnVisibility,\n-      onRowSelectionChange: setRowSelection,\n-      state: {\n-        sorting,\n-        columnFilters,\n-        columnVisibility,\n-        rowSelection,\n-      },\n-    });\n+  const table = useReactTable({\n+    data,\n+    columns,\n+    onSortingChange: setSorting,\n+    onColumnFiltersChange: setColumnFilters,\n+    getCoreRowModel: getCoreRowModel(),\n+    getPaginationRowModel: getPaginationRowModel(),\n+    getSortedRowModel: getSortedRowModel(),\n+    getFilteredRowModel: getFilteredRowModel(),\n+    onColumnVisibilityChange: setColumnVisibility,\n+    onRowSelectionChange: setRowSelection,\n+    state: {\n+      sorting,\n+      columnFilters,\n+      columnVisibility,\n+      rowSelection,\n+    },\n+  })\n \n-    return (\n-      <div className=\"w-full\">\n-        <div className=\"flex items-center py-4\">\n-          <Input\n-            placeholder=\"Filter emails...\"\n-            value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n-            onChange={(event) =>\n-              table.getColumn(\"email\")?.setFilterValue(event.target.value)\n-            }\n-            className=\"max-w-sm\"\n-          />\n-          <DropdownMenu>\n-            <DropdownMenuTrigger asChild>\n-              <Button variant=\"outline\" className=\"ml-auto\">\n-                Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n-              </Button>\n-            </DropdownMenuTrigger>\n-            <DropdownMenuContent align=\"end\">\n-              {table\n-                .getAllColumns()\n-                .filter((column) => column.getCanHide())\n-                .map((column) => {\n+  return (\n+    <div className=\"w-full\">\n+      <div className=\"flex items-center py-4\">\n+        <Input\n+          placeholder=\"Filter emails...\"\n+          value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n+          onChange={(event) =>\n+            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n+          }\n+          className=\"max-w-sm\"\n+        />\n+        <DropdownMenu>\n+          <DropdownMenuTrigger asChild>\n+            <Button variant=\"outline\" className=\"ml-auto\">\n+              Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n+            </Button>\n+          </DropdownMenuTrigger>\n+          <DropdownMenuContent align=\"end\">\n+            {table\n+              .getAllColumns()\n+              .filter((column) => column.getCanHide())\n+              .map((column) => {\n+                return (\n+                  <DropdownMenuCheckboxItem\n+                    key={column.id}\n+                    className=\"capitalize\"\n+                    checked={column.getIsVisible()}\n+                    onCheckedChange={(value) =>\n+                      column.toggleVisibility(!!value)\n+                    }\n+                  >\n+                    {column.id}\n+                  </DropdownMenuCheckboxItem>\n+                )\n+              })}\n+          </DropdownMenuContent>\n+        </DropdownMenu>\n+      </div>\n+      <div className=\"rounded-md border\">\n+        <Table>\n+          <TableHeader>\n+            {table.getHeaderGroups().map((headerGroup) => (\n+              <TableRow key={headerGroup.id}>\n+                {headerGroup.headers.map((header) => {\n                   return (\n-                    <DropdownMenuCheckboxItem\n-                      key={column.id}\n-                      className=\"capitalize\"\n-                      checked={column.getIsVisible()}\n-                      onCheckedChange={(value) =>\n-                        column.toggleVisibility(!!value)\n-                      }\n-                    >\n-                      {column.id}\n-                    </DropdownMenuCheckboxItem>\n-                  );\n+                    <TableHead key={header.id}>\n+                      {header.isPlaceholder\n+                        ? null\n+                        : flexRender(\n+                            header.column.columnDef.header,\n+                            header.getContext()\n+                          )}\n+                    </TableHead>\n+                  )\n                 })}\n-            </DropdownMenuContent>\n-          </DropdownMenu>\n-        </div>\n-        <div className=\"rounded-md border\">\n-          <Table>\n-            <TableHeader>\n-              {table.getHeaderGroups().map((headerGroup) => (\n-                <TableRow key={headerGroup.id}>\n-                  {headerGroup.headers.map((header) => {\n-                    return (\n-                      <TableHead key={header.id}>\n-                        {header.isPlaceholder\n-                          ? null\n-                          : flexRender(\n-                              header.column.columnDef.header,\n-                              header.getContext()\n-                            )}\n-                      </TableHead>\n-                    );\n-                  })}\n+              </TableRow>\n+            ))}\n+          </TableHeader>\n+          <TableBody>\n+            {table.getRowModel().rows?.length ? (\n+              table.getRowModel().rows.map((row) => (\n+                <TableRow\n+                  key={row.id}\n+                  data-state={row.getIsSelected() && \"selected\"}\n+                >\n+                  {row.getVisibleCells().map((cell) => (\n+                    <TableCell key={cell.id}>\n+                      {flexRender(\n+                        cell.column.columnDef.cell,\n+                        cell.getContext()\n+                      )}\n+                    </TableCell>\n+                  ))}\n                 </TableRow>\n-              ))}\n-            </TableHeader>\n-            <TableBody>\n-              {table.getRowModel().rows?.length ? (\n-                table.getRowModel().rows.map((row) => (\n-                  <TableRow\n-                    key={row.id}\n-                    data-state={row.getIsSelected() && \"selected\"}\n-                  >\n-                    {row.getVisibleCells().map((cell) => (\n-                      <TableCell key={cell.id}>\n-                        {flexRender(\n-                          cell.column.columnDef.cell,\n-                          cell.getContext()\n-                        )}\n-                      </TableCell>\n-                    ))}\n-                  </TableRow>\n-                ))\n-              ) : (\n-                <TableRow>\n-                  <TableCell\n-                    colSpan={columns.length}\n-                    className=\"h-24 text-center\"\n-                  >\n-                    No results.\n-                  </TableCell>\n-                </TableRow>\n-              )}\n-            </TableBody>\n-          </Table>\n+              ))\n+            ) : (\n+              <TableRow>\n+                <TableCell\n+                  colSpan={columns.length}\n+                  className=\"h-24 text-center\"\n+                >\n+                  No results.\n+                </TableCell>\n+              </TableRow>\n+            )}\n+          </TableBody>\n+        </Table>\n+      </div>\n+      <div className=\"flex items-center justify-end space-x-2 py-4\">\n+        <div className=\"flex-1 text-sm text-muted-foreground\">\n+          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n+          {table.getFilteredRowModel().rows.length} row(s) selected.\n         </div>\n-        <div className=\"flex items-center justify-end space-x-2 py-4\">\n-          <div className=\"flex-1 text-sm text-muted-foreground\">\n-            {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n-            {table.getFilteredRowModel().rows.length} row(s) selected.\n-          </div>\n-          <div className=\"space-x-2\">\n-            <Button\n-              variant=\"outline\"\n-              size=\"sm\"\n-              onClick={() => table.previousPage()}\n-              disabled={!table.getCanPreviousPage()}\n-            >\n-              Previous\n-            </Button>\n-            <Button\n-              variant=\"outline\"\n-              size=\"sm\"\n-              onClick={() => table.nextPage()}\n-              disabled={!table.getCanNextPage()}\n-            >\n-              Next\n-            </Button>\n-          </div>\n+        <div className=\"space-x-2\">\n+          <Button\n+            variant=\"outline\"\n+            size=\"sm\"\n+            onClick={() => table.previousPage()}\n+            disabled={!table.getCanPreviousPage()}\n+          >\n+            Previous\n+          </Button>\n+          <Button\n+            variant=\"outline\"\n+            size=\"sm\"\n+            onClick={() => table.nextPage()}\n+            disabled={!table.getCanNextPage()}\n+          >\n+            Next\n+          </Button>\n         </div>\n       </div>\n-    );\n-  }\n-};\n-\n-export default table;\n+    </div>\n+  )\n+}\n"
                },
                {
                    "date": 1728539781428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,32 +42,9 @@\n     amount: 316,\n     status: \"success\",\n     email: \"ken99@yahoo.com\",\n   },\n-  {\n-    id: \"3u1reuv4\",\n-    amount: 242,\n-    status: \"success\",\n-    email: \"Abe45@gmail.com\",\n-  },\n-  {\n-    id: \"derv1ws0\",\n-    amount: 837,\n-    status: \"processing\",\n-    email: \"Monserrat44@gmail.com\",\n-  },\n-  {\n-    id: \"5kma53ae\",\n-    amount: 874,\n-    status: \"success\",\n-    email: \"Silas22@gmail.com\",\n-  },\n-  {\n-    id: \"bhqecj4p\",\n-    amount: 721,\n-    status: \"failed\",\n-    email: \"carmella@hotmail.com\",\n-  },\n+  \n ]\n \n export type Payment = {\n   id: string\n"
                },
                {
                    "date": 1728539897688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \n export type Payment = {\n   id: string\n   amount: number\n-  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n+  status: \"Available\" | \"Not available\" |\n   email: string\n }\n \n export const columns: ColumnDef<Payment>[] = [\n"
                },
                {
                    "date": 1728540060359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,11 +38,13 @@\n \n const data: Payment[] = [\n   {\n     id: \"m5gr84i9\",\n+    type: \"cardboard\",\n+    weigth: 12,\n     amount: 316,\n-    status: \"success\",\n-    email: \"ken99@yahoo.com\",\n+    status: \"Available\",\n+    \n   },\n   \n ]\n \n"
                },
                {
                    "date": 1728540170432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,11 +49,13 @@\n ]\n \n export type Payment = {\n   id: string\n+  type: string\n+  weigth: number\n   amount: number\n   status: \"Available\" | \"Not available\" |\n-  email: string\n+  \n }\n \n export const columns: ColumnDef<Payment>[] = [\n   {\n"
                },
                {
                    "date": 1728540400031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,24 +38,20 @@\n \n const data: Payment[] = [\n   {\n     id: \"m5gr84i9\",\n-    type: \"cardboard\",\n-    weigth: 12,\n     amount: 316,\n-    status: \"Available\",\n-    \n+    status: \"success\",\n+    email: \"ken99@yahoo.com\",\n   },\n   \n ]\n \n export type Payment = {\n   id: string\n-  type: string\n-  weigth: number\n   amount: number\n-  status: \"Available\" | \"Not available\" |\n-  \n+  status: \"Available\" | \"Not available\" | \"success\" | \"failed\"\n+  email: string\n }\n \n export const columns: ColumnDef<Payment>[] = [\n   {\n"
                },
                {
                    "date": 1728682656282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-\"use client\"\n \n import * as React from \"react\"\n import {\n   ColumnDef,\n"
                },
                {
                    "date": 1728774073446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,18 +38,18 @@\n const data: Payment[] = [\n   {\n     id: \"m5gr84i9\",\n     amount: 316,\n-    status: \"success\",\n+    status: \"Available\",\n     email: \"ken99@yahoo.com\",\n   },\n   \n ]\n \n export type Payment = {\n   id: string\n   amount: number\n-  status: \"Available\" | \"Not available\" | \"success\" | \"failed\"\n+  status: \"Available\" | \"Not available\"\n   email: string\n }\n \n export const columns: ColumnDef<Payment>[] = [\n"
                },
                {
                    "date": 1728774191263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,18 +38,18 @@\n const data: Payment[] = [\n   {\n     id: \"m5gr84i9\",\n     amount: 316,\n-    status: \"Available\",\n+    status: \"success\",\n     email: \"ken99@yahoo.com\",\n   },\n   \n ]\n \n export type Payment = {\n   id: string\n   amount: number\n-  status: \"Available\" | \"Not available\"\n+  status: \"Available\" | \"Not available\" | \"success\" | \"failed\"\n   email: string\n }\n \n export const columns: ColumnDef<Payment>[] = [\n"
                },
                {
                    "date": 1728776060424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,27 +118,9 @@\n     cell: ({ row }) => {\n       const payment = row.original\n \n       return (\n-        <DropdownMenu>\n-          <DropdownMenuTrigger asChild>\n-            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n-              <span className=\"sr-only\">Open menu</span>\n-              <MoreHorizontal className=\"h-4 w-4\" />\n-            </Button>\n-          </DropdownMenuTrigger>\n-          <DropdownMenuContent align=\"end\">\n-            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n-            <DropdownMenuItem\n-              onClick={() => navigator.clipboard.writeText(payment.id)}\n-            >\n-              Copy payment ID\n-            </DropdownMenuItem>\n-            <DropdownMenuSeparator />\n-            <DropdownMenuItem>View customer</DropdownMenuItem>\n-            <DropdownMenuItem>View payment details</DropdownMenuItem>\n-          </DropdownMenuContent>\n-        </DropdownMenu>\n+       <></>\n       )\n     },\n   },\n ]\n"
                }
            ],
            "date": 1728535723510,
            "name": "Commit-0",
            "content": "\nimport * as React from \"react\";\nimport {\n    ColumnDef,\n    ColumnFiltersState,\n    SortingState,\n    VisibilityState,\n    flexRender,\n    getCoreRowModel,\n    getFilteredRowModel,\n    getPaginationRowModel,\n    getSortedRowModel,\n    useReactTable,\n  } from \"@tanstack/react-table\";\n  import { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\";\n  import { Button } from \"@/components/ui/button\";\n  import { Checkbox } from \"@/components/ui/checkbox\";\n  import {\n    DropdownMenu,\n    DropdownMenuCheckboxItem,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuLabel,\n    DropdownMenuSeparator,\n    DropdownMenuTrigger,\n  } from \"@/components/ui/dropdown-menu\";\n  import { Input } from \"@/components/ui/input\";\n  import {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n  } from \"@/components/ui/table\";\nconst table = () => {\n  const data: Payment[] = [\n    {\n      id: \"m5gr84i9\",\n      amount: 316,\n      status: \"success\",\n      email: \"ken99@yahoo.com\",\n    },\n    {\n      id: \"3u1reuv4\",\n      amount: 242,\n      status: \"success\",\n      email: \"Abe45@gmail.com\",\n    },\n    {\n      id: \"derv1ws0\",\n      amount: 837,\n      status: \"processing\",\n      email: \"Monserrat44@gmail.com\",\n    },\n    {\n      id: \"5kma53ae\",\n      amount: 874,\n      status: \"success\",\n      email: \"Silas22@gmail.com\",\n    },\n    {\n      id: \"bhqecj4p\",\n      amount: 721,\n      status: \"failed\",\n      email: \"carmella@hotmail.com\",\n    },\n  ];\n\n  export type Payment = {\n    id: string;\n    amount: number;\n    status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n    email: string;\n  };\n\n  export const columns: ColumnDef<Payment>[] = [\n    {\n      id: \"select\",\n      header: ({ table }) => (\n        <Checkbox\n          checked={\n            table.getIsAllPageRowsSelected() ||\n            (table.getIsSomePageRowsSelected() && \"indeterminate\")\n          }\n          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n          aria-label=\"Select all\"\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          onCheckedChange={(value) => row.toggleSelected(!!value)}\n          aria-label=\"Select row\"\n        />\n      ),\n      enableSorting: false,\n      enableHiding: false,\n    },\n    {\n      accessorKey: \"status\",\n      header: \"Status\",\n      cell: ({ row }) => (\n        <div className=\"capitalize\">{row.getValue(\"status\")}</div>\n      ),\n    },\n    {\n      accessorKey: \"email\",\n      header: ({ column }) => {\n        return (\n          <Button\n            variant=\"ghost\"\n            onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n          >\n            Email\n            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n          </Button>\n        );\n      },\n      cell: ({ row }) => (\n        <div className=\"lowercase\">{row.getValue(\"email\")}</div>\n      ),\n    },\n    {\n      accessorKey: \"amount\",\n      header: () => <div className=\"text-right\">Amount</div>,\n      cell: ({ row }) => {\n        const amount = parseFloat(row.getValue(\"amount\"));\n\n        // Format the amount as a dollar amount\n        const formatted = new Intl.NumberFormat(\"en-US\", {\n          style: \"currency\",\n          currency: \"USD\",\n        }).format(amount);\n\n        return <div className=\"text-right font-medium\">{formatted}</div>;\n      },\n    },\n    {\n      id: \"actions\",\n      enableHiding: false,\n      cell: ({ row }) => {\n        const payment = row.original;\n\n        return (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                <span className=\"sr-only\">Open menu</span>\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuLabel>Actions</DropdownMenuLabel>\n              <DropdownMenuItem\n                onClick={() => navigator.clipboard.writeText(payment.id)}\n              >\n                Copy payment ID\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem>View customer</DropdownMenuItem>\n              <DropdownMenuItem>View payment details</DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        );\n      },\n    },\n  ];\n\n  export function DataTableDemo() {\n    const [sorting, setSorting] = React.useState<SortingState>([]);\n    const [columnFilters, setColumnFilters] =\n      React.useState<ColumnFiltersState>([]);\n    const [columnVisibility, setColumnVisibility] =\n      React.useState<VisibilityState>({});\n    const [rowSelection, setRowSelection] = React.useState({});\n\n    const table = useReactTable({\n      data,\n      columns,\n      onSortingChange: setSorting,\n      onColumnFiltersChange: setColumnFilters,\n      getCoreRowModel: getCoreRowModel(),\n      getPaginationRowModel: getPaginationRowModel(),\n      getSortedRowModel: getSortedRowModel(),\n      getFilteredRowModel: getFilteredRowModel(),\n      onColumnVisibilityChange: setColumnVisibility,\n      onRowSelectionChange: setRowSelection,\n      state: {\n        sorting,\n        columnFilters,\n        columnVisibility,\n        rowSelection,\n      },\n    });\n\n    return (\n      <div className=\"w-full\">\n        <div className=\"flex items-center py-4\">\n          <Input\n            placeholder=\"Filter emails...\"\n            value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n            onChange={(event) =>\n              table.getColumn(\"email\")?.setFilterValue(event.target.value)\n            }\n            className=\"max-w-sm\"\n          />\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" className=\"ml-auto\">\n                Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              {table\n                .getAllColumns()\n                .filter((column) => column.getCanHide())\n                .map((column) => {\n                  return (\n                    <DropdownMenuCheckboxItem\n                      key={column.id}\n                      className=\"capitalize\"\n                      checked={column.getIsVisible()}\n                      onCheckedChange={(value) =>\n                        column.toggleVisibility(!!value)\n                      }\n                    >\n                      {column.id}\n                    </DropdownMenuCheckboxItem>\n                  );\n                })}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    return (\n                      <TableHead key={header.id}>\n                        {header.isPlaceholder\n                          ? null\n                          : flexRender(\n                              header.column.columnDef.header,\n                              header.getContext()\n                            )}\n                      </TableHead>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows?.length ? (\n                table.getRowModel().rows.map((row) => (\n                  <TableRow\n                    key={row.id}\n                    data-state={row.getIsSelected() && \"selected\"}\n                  >\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id}>\n                        {flexRender(\n                          cell.column.columnDef.cell,\n                          cell.getContext()\n                        )}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell\n                    colSpan={columns.length}\n                    className=\"h-24 text-center\"\n                  >\n                    No results.\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </div>\n        <div className=\"flex items-center justify-end space-x-2 py-4\">\n          <div className=\"flex-1 text-sm text-muted-foreground\">\n            {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n            {table.getFilteredRowModel().rows.length} row(s) selected.\n          </div>\n          <div className=\"space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => table.previousPage()}\n              disabled={!table.getCanPreviousPage()}\n            >\n              Previous\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => table.nextPage()}\n              disabled={!table.getCanNextPage()}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default table;\n"
        }
    ]
}